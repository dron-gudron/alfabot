import os
import asyncio
import logging
import requests
from bs4 import BeautifulSoup
from flask import Flask, request
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters
)

# =======================
# üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏
# =======================
TOKEN = os.getenv("TOKEN") or "–¢–í–û–ô_–¢–û–ö–ï–ù_–ë–û–¢–ê"
WEBHOOK_PATH = f"/{TOKEN}"
WEBHOOK_URL = f"https://alfabot-wt8z.onrender.com{WEBHOOK_PATH}"

app = Flask(__name__)
logging.basicConfig(level=logging.INFO)

# =======================
# üß† –§—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫—É—Ä—Å–∞
# =======================
def get_eur_rate():
    url = "https://www.alfabank.by/exchange/digital/"
    try:
        r = requests.get(url, timeout=10)
        soup = BeautifulSoup(r.text, "html.parser")
        # –∏—â–µ–º —ç–ª–µ–º–µ–Ω—Ç —Å EUR
        row = soup.find("div", text="EUR").find_parent("div", class_="currency-item")
        buy = row.find_all("span", class_="rate")[0].text.strip()
        sell = row.find_all("span", class_="rate")[1].text.strip()
        return f"üí∂ –ö—É—Ä—Å –µ–≤—Ä–æ:\n–ü–æ–∫—É–ø–∫–∞: {buy}\n–ü—Ä–æ–¥–∞–∂–∞: {sell}"
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–∞: {e}")
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å üòï"

# =======================
# ü§ñ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
# =======================
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [["–ö—É—Ä—Å –µ–≤—Ä–æ üí∂"]]
    markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! üëã\n–Ø –ø–æ–∫–∞–∑—ã–≤–∞—é —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å –µ–≤—Ä–æ.\n–í—ã–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É –≤ –º–µ–Ω—é –Ω–∏–∂–µ:",
        reply_markup=markup
    )

async def euro_rate(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = get_eur_rate()
    await update.message.reply_text(text)

# =======================
# üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
# =======================
async def setup_bot():
    app_telegram = Application.builder().token(TOKEN).build()

    app_telegram.add_handler(CommandHandler("start", start))
    app_telegram.add_handler(MessageHandler(filters.Regex("–ö—É—Ä—Å –µ–≤—Ä–æ"), euro_rate))

    await app_telegram.initialize()
    await app_telegram.bot.set_webhook(WEBHOOK_URL)
    logging.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")

    return app_telegram

telegram_app = asyncio.run(setup_bot())

# =======================
# üåê Flask webhook
# =======================
@app.route(WEBHOOK_PATH, methods=["POST"])
def telegram_webhook():
    update = Update.de_json(request.get_json(force=True), telegram_app.bot)
    asyncio.run(telegram_app.process_update(update))
    return "ok", 200

@app.route("/")
def index():
    return "–ê–ª—å—Ñ–∞–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!", 200

# =======================
# üèÅ –ó–∞–ø—É—Å–∫ Flask
# =======================
if __name__ == "__main__":
    app.run(host="0.0.0.0", port=10000)

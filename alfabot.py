import os
import asyncio
import threading
import requests
from flask import Flask, request
from telegram import Update, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes

# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===
TOKEN = os.getenv("TOKEN")  # —Ç–≤–æ–π —Ç–æ–∫–µ–Ω —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞
WEBHOOK_URL = "https://alfabot-wt8z.onrender.com/webhook"  # —Ç–≤–æ–π Render URL + /webhook

app = Flask(__name__)

# === –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ –µ–≤—Ä–æ ===
def get_exchange_rate():
    try:
        url = "https://www.alfabank.by/api/v1/exchange-rates/rates/?currencyCode=978&rateType=cash"
        response = requests.get(url, timeout=10)
        response.raise_for_status()
        data = response.json()

        rate = data["rates"][0]
        buy = rate["buyRate"]
        sell = rate["sellRate"]

        return f"üí∂ –ö—É—Ä—Å –µ–≤—Ä–æ –≤ –ê–ª—å—Ñ–∞-–ë–∞–Ω–∫–µ (–Ω–∞–ª–∏—á–Ω—ã–π):\n–ü–æ–∫—É–ø–∫–∞: {buy} BYN\n–ü—Ä–æ–¥–∞–∂–∞: {sell} BYN"
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞: {e}")
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å üòï"


# === –•—ç–Ω–¥–ª–µ—Ä—ã –∫–æ–º–∞–Ω–¥ ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [KeyboardButton("–ö—É—Ä—Å –µ–≤—Ä–æ")],
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! üëã\n–Ø –ø–æ–∫–∞–∑—ã–≤–∞—é —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å –µ–≤—Ä–æ.\n–í—ã–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É –≤ –º–µ–Ω—é –Ω–∏–∂–µ:",
        reply_markup=reply_markup,
    )


async def get_rate(update: Update, context: ContextTypes.DEFAULT_TYPE):
    rate_message = get_exchange_rate()
    await update.message.reply_text(rate_message)


# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ===
async def setup_bot():
    app_telegram = Application.builder().token(TOKEN).build()

    app_telegram.add_handler(CommandHandler("start", start))

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ö—É—Ä—Å –µ–≤—Ä–æ"
    app_telegram.add_handler(CommandHandler("rate", get_rate))
    app_telegram.add_handler(CommandHandler("–∫—É—Ä—Å", get_rate))

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º Webhook
    await app_telegram.bot.set_webhook(WEBHOOK_URL)

    return app_telegram


# === Flask-–º–∞—Ä—à—Ä—É—Ç—ã ===
@app.route("/")
def index():
    return "‚úÖ Telegram bot is running"


@app.route("/webhook", methods=["POST"])
async def webhook():
    update = Update.de_json(request.get_json(force=True), app_telegram.bot)
    await app_telegram.process_update(update)
    return "OK", 200


# === –ó–∞–ø—É—Å–∫ ===
if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    app_telegram = loop.run_until_complete(setup_bot())

    def run_flask():
        app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 10000)))

    threading.Thread(target=run_flask).start()

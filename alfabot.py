from flask import Flask, request
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters
import requests
import asyncio
import os

TOKEN = os.getenv("BOT_TOKEN") or "–í–ê–®_–¢–û–ö–ï–ù_–ë–û–¢–ê"
WEBHOOK_URL = f"https://alfabot-wt8z.onrender.com/{TOKEN}"

app = Flask(__name__)

# === –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–∞ –µ–≤—Ä–æ —Å —Å–∞–π—Ç–∞ –ê–ª—å—Ñ–∞-–ë–∞–Ω–∫–∞ ===
def get_eur_rate():
    try:
        url = "https://www.alfabank.by/api/exchange-rates/public/digital"
        r = requests.get(url, timeout=5)
        r.raise_for_status()
        data = r.json()

        # –∏—â–µ–º –µ–≤—Ä–æ –≤ —Å–ø–∏—Å–∫–µ
        for item in data:
            if item["sellCurrency"] == "EUR" and item["buyCurrency"] == "BYN":
                rate_buy = item["buyRate"]
                rate_sell = item["sellRate"]
                return rate_buy, rate_sell

        return None
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–∞: {e}")
        return None

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [["–ö—É—Ä—Å –µ–≤—Ä–æ üí∂"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! üëã\n–Ø –ø–æ–∫–∞–∑—ã–≤–∞—é –∫—É—Ä—Å –µ–≤—Ä–æ –ø–æ –¥–∞–Ω–Ω—ã–º –ê–ª—å—Ñ–∞-–ë–∞–Ω–∫–∞ –ë–µ–ª–∞—Ä—É—Å—å.\n–í—ã–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É –≤ –º–µ–Ω—é –Ω–∏–∂–µ:",
        reply_markup=reply_markup
    )

async def eur_rate(update: Update, context: ContextTypes.DEFAULT_TYPE):
    rate = get_eur_rate()
    if rate:
        buy, sell = rate
        await update.message.reply_text(
            f"üí∂ –ö—É—Ä—Å –µ–≤—Ä–æ –ø–æ –ê–ª—å—Ñ–∞-–ë–∞–Ω–∫—É:\n\n–ü–æ–∫—É–ø–∫–∞: {buy:.2f} BYN\n–ü—Ä–æ–¥–∞–∂–∞: {sell:.2f} BYN"
        )
    else:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å —Å —Å–∞–π—Ç–∞ –ê–ª—å—Ñ–∞-–ë–∞–Ω–∫–∞ üòî")

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ===
async def setup_bot():
    app_telegram = Application.builder().token(TOKEN).build()
    app_telegram.add_handler(CommandHandler("start", start))
    app_telegram.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, eur_rate))

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫
    await app_telegram.bot.set_webhook(WEBHOOK_URL)
    print(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")
    return app_telegram

# === Flask webhook ===
telegram_app = None

@app.route(f"/{TOKEN}", methods=["POST"])
def telegram_webhook():
    global telegram_app
    if telegram_app is None:
        return "Bot not initialized", 500

    update = Update.de_json(request.get_json(force=True), telegram_app.bot)
    asyncio.run(telegram_app.process_update(update))
    return "ok", 200

@app.route("/")
def home():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!"

if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    telegram_app = loop.run_until_complete(setup_bot())
    app.run(host="0.0.0.0", port=10000)

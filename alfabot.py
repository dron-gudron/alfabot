import os
import time
import threading
import requests
from bs4 import BeautifulSoup
from flask import Flask
from telegram import Bot, Update, BotCommand
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes

TOKEN = os.getenv("BOT_TOKEN")
CHAT_ID = os.getenv("CHAT_ID")

bot = Bot(token=TOKEN)
app = Flask(__name__)

# ‚Äî‚Äî‚Äî –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–∞ –µ–≤—Ä–æ ‚Äî‚Äî‚Äî
def get_eur_rate():
    url = "https://www.alfabank.by/exchange/digital/"
    response = requests.get(url)
    soup = BeautifulSoup(response.text, "html.parser")
    eur_block = soup.find("div", {"class": "exchange-currency", "data-currency": "EUR"})
    if eur_block:
        rate = eur_block.find("span", {"class": "rate-value"}).text.strip()
        return float(rate.replace(",", "."))
    return None

# ‚Äî‚Äî‚Äî –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—É—Ä—Å–∞ ‚Äî‚Äî‚Äî
last_rate = None

def check_rate_loop():
    global last_rate
    while True:
        try:
            current = get_eur_rate()
            if current is not None:
                if last_rate is None:
                    last_rate = current
                elif abs(current - last_rate) >= 0.001:
                    text = f"üí∂ –ö—É—Ä—Å –µ–≤—Ä–æ –∏–∑–º–µ–Ω–∏–ª—Å—è!\n–ë—ã–ª–æ: {last_rate:.3f}\n–°—Ç–∞–ª–æ: {current:.3f}"
                    bot.send_message(chat_id=CHAT_ID, text=text)
                    last_rate = current
        except Exception as e:
            print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫—É—Ä—Å–∞:", e)
        time.sleep(60)

# ‚Äî‚Äî‚Äî –ö–æ–º–∞–Ω–¥—ã Telegram ‚Äî‚Äî‚Äî
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    rate = get_eur_rate()
    if rate:
        await update.message.reply_text(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω ‚úÖ\n–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å –µ–≤—Ä–æ: {rate:.3f}")
    else:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å üòï")

async def check(update: Update, context: ContextTypes.DEFAULT_TYPE):
    rate = get_eur_rate()
    if rate:
        await update.message.reply_text(f"üí∂ –°–µ–π—á–∞—Å –∫—É—Ä—Å –µ–≤—Ä–æ: {rate:.3f}")
    else:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å üòï")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å\n"
        "/check ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫—É—Ä—Å –≤—Ä—É—á–Ω—É—é\n"
        "/help ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ"
    )
    await update.message.reply_text(text)

# ‚Äî‚Äî‚Äî Flask, —á—Ç–æ–±—ã Render –Ω–µ –∑–∞—Å—ã–ø–∞–ª ‚Äî‚Äî‚Äî
@app.route("/")
def home():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!"

def ping_self():
    while True:
        try:
            requests.get("https://alfabot-wt8z.onrender.com")  # ‚Üê –∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π URL!
        except:
            pass
        time.sleep(300)

# ‚Äî‚Äî‚Äî –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ‚Äî‚Äî‚Äî
def main():
    threading.Thread(target=check_rate_loop, daemon=True).start()
    threading.Thread(target=ping_self, daemon=True).start()

    app_builder = ApplicationBuilder().token(TOKEN).build()
    app_builder.add_handler(CommandHandler("start", start))
    app_builder.add_handler(CommandHandler("check", check))
    app_builder.add_handler(CommandHandler("help", help_command))

    # ‚Äî‚Äî‚Äî –î–æ–±–∞–≤–ª—è–µ–º –º–µ–Ω—é –∫–æ–º–∞–Ω–¥ ‚Äî‚Äî‚Äî
    app_builder.bot.set_my_commands([
        BotCommand("start", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ –ø–æ–∫–∞–∑–∞—Ç—å –∫—É—Ä—Å"),
        BotCommand("check", "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫—É—Ä—Å –≤—Ä—É—á–Ω—É—é"),
        BotCommand("help", "–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"),
    ])

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã...")
    app_builder.run_polling()

if __name__ == "__main__":
    threading.Thread(target=lambda: app.run(host="0.0.0.0", port=10000), daemon=True).start()
    main()

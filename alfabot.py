import os
import time
import threading
import requests
from flask import Flask
from telegram import Bot, Update, BotCommand
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes

# ‚Äî‚Äî‚Äî –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Äî‚Äî‚Äî
TOKEN = os.getenv("TOKEN")        # —Ç–µ–ø–µ—Ä—å —Ç–æ–∫–µ–Ω —á–∏—Ç–∞–µ—Ç—Å—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π TOKEN
CHAT_ID = os.getenv("CHAT_ID")

bot = Bot(token=TOKEN)
app = Flask(__name__)

# ‚Äî‚Äî‚Äî –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–∞ –µ–≤—Ä–æ –∏–∑ API –ê–ª—å—Ñ–∞-–ë–∞–Ω–∫–∞ ‚Äî‚Äî‚Äî
def get_eur_rate():
    try:
        url = "https://developerhub.alfabank.by:8273/partner/1.0.1/public/rates"
        response = requests.get(url, timeout=10)
        data = response.json()

        for rate in data.get("rates", []):
            if rate.get("sellCurrency") == "EUR" and rate.get("buyCurrency") == "BYN":
                return float(rate["buyRate"])
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–∞:", e)
    return None

# ‚Äî‚Äî‚Äî –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∫—É—Ä—Å–∞ ‚Äî‚Äî‚Äî
last_rate = None

def check_rate_loop():
    global last_rate
    while True:
        try:
            current = get_eur_rate()
            if current is not None:
                if last_rate is None:
                    last_rate = current
                elif abs(current - last_rate) >= 0.001:
                    text = f"üí∂ –ö—É—Ä—Å –µ–≤—Ä–æ –∏–∑–º–µ–Ω–∏–ª—Å—è!\n–ë—ã–ª–æ: {last_rate:.3f}\n–°—Ç–∞–ª–æ: {current:.3f}"
                    bot.send_message(chat_id=CHAT_ID, text=text)
                    last_rate = current
        except Exception as e:
            print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫—É—Ä—Å–∞:", e)
        time.sleep(60)  # –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑ –≤ –º–∏–Ω—É—Ç—É

# ‚Äî‚Äî‚Äî –ö–æ–º–∞–Ω–¥—ã Telegram ‚Äî‚Äî‚Äî
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    rate = get_eur_rate()
    if rate:
        await update.message.reply_text(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω ‚úÖ\n–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å –µ–≤—Ä–æ: {rate:.3f}")
    else:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å üòï")

async def check(update: Update, context: ContextTypes.DEFAULT_TYPE):
    rate = get_eur_rate()
    if rate:
        await update.message.reply_text(f"üí∂ –°–µ–π—á–∞—Å –∫—É—Ä—Å –µ–≤—Ä–æ: {rate:.3f}")
    else:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å üòï")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å\n"
        "/check ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫—É—Ä—Å –≤—Ä—É—á–Ω—É—é\n"
        "/help ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"
    )
    await update.message.reply_text(text)

# ‚Äî‚Äî‚Äî Flask —Å–µ—Ä–≤–µ—Ä, —á—Ç–æ–±—ã Render –Ω–µ –∑–∞—Å—ã–ø–∞–ª ‚Äî‚Äî‚Äî
@app.route("/")
def home():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!"

def ping_self():
    while True:
        try:
            requests.get("https://alfabot-wt8z.onrender.com")  # ‚ö†Ô∏è –∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π URL, –µ—Å–ª–∏ –¥—Ä—É–≥–æ–π
        except:
            pass
        time.sleep(300)  # –ø–∏–Ω–≥ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç

# ‚Äî‚Äî‚Äî –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ‚Äî‚Äî‚Äî
def main():
    threading.Thread(target=check_rate_loop, daemon=True).start()
    threading.Thread(target=ping_self, daemon=True).start()

    app_builder = ApplicationBuilder().token(TOKEN).build()
    app_builder.add_handler(CommandHandler("start", start))
    app_builder.add_handler(CommandHandler("check", check))
    app_builder.add_handler(CommandHandler("help", help_command))

    # –ú–µ–Ω—é –∫–æ–º–∞–Ω–¥ –≤ Telegram
    app_builder.bot.set_my_commands([
        BotCommand("start", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ –ø–æ–∫–∞–∑–∞—Ç—å –∫—É—Ä—Å"),
        BotCommand("check", "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫—É—Ä—Å –≤—Ä—É—á–Ω—É—é"),
        BotCommand("help", "–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"),
    ])

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã...")
    app_builder.run_polling()

if __name__ == "__main__":
    threading.Thread(target=lambda: app.run(host="0.0.0.0", port=10000), daemon=True).start()
    main()

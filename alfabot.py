import asyncio
import aiohttp
from aiohttp import web
from bs4 import BeautifulSoup
from aiogram import Bot, Dispatcher
from aiogram.filters import Command
from aiogram.types import Message
import os

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
TOKEN = os.getenv("TOKEN") or "–í–ê–®_TELEGRAM_TOKEN"
CHAT_ID = os.getenv("CHAT_ID") or "–í–ê–®_CHAT_ID"
CHECK_INTERVAL = 600  # –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫—É—Ä—Å–∞ (—Å–µ–∫—É–Ω–¥)
PING_INTERVAL = 300   # –ø–∏–Ω–≥ (—Å–µ–∫—É–Ω–¥)
URL = "https://www.alfabank.by/exchange/digital/"

bot = Bot(token=TOKEN)
dp = Dispatcher()
last_buy, last_sell = None, None


async def get_eur_rate():
    """–ü–∞—Ä—Å–∏—Ç –∫—É—Ä—Å –µ–≤—Ä–æ —Å —Å–∞–π—Ç–∞ –ê–ª—å—Ñ–∞-–ë–∞–Ω–∫–∞"""
    async with aiohttp.ClientSession() as session:
        async with session.get(URL) as resp:
            html = await resp.text()
    soup = BeautifulSoup(html, "lxml")

    eur_block = soup.find("div", {"data-currency": "EUR"})
    if not eur_block:
        return None, None

    buy_span = eur_block.find("span", class_="rate__value--buy")
    sell_span = eur_block.find("span", class_="rate__value--sell")
    if not buy_span or not sell_span:
        return None, None

    buy = float(buy_span.text.strip().replace(",", "."))
    sell = float(sell_span.text.strip().replace(",", "."))
    return buy, sell


async def check_rate():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫—É—Ä—Å –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö"""
    global last_buy, last_sell
    while True:
        try:
            buy, sell = await get_eur_rate()
            if buy and sell:
                if last_buy is not None and (buy != last_buy or sell != last_sell):
                    text = (
                        f"üí∂ –ö—É—Ä—Å –µ–≤—Ä–æ –∏–∑–º–µ–Ω–∏–ª—Å—è!\n\n"
                        f"–ü–æ–∫—É–ø–∫–∞: {buy:.4f}\n–ü—Ä–æ–¥–∞–∂–∞: {sell:.4f}"
                    )
                    await bot.send_message(CHAT_ID, text)
                last_buy, last_sell = buy, sell
            else:
                print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –µ–≤—Ä–æ")
        except Exception as e:
            print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ:", e)
        await asyncio.sleep(CHECK_INTERVAL)


async def ping_self():
    """–ü–∏–Ω–≥—É–µ—Ç —Å–∞–º —Å–µ–±—è, —á—Ç–æ–±—ã Render –Ω–µ "—É—Å—ã–ø–∏–ª""""
    url = os.getenv("RENDER_EXTERNAL_URL")
    if not url:
        print("‚ö†Ô∏è –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è RENDER_EXTERNAL_URL –Ω–µ –∑–∞–¥–∞–Ω–∞ (ping –æ—Ç–∫–ª—é—á–µ–Ω)")
        return

    while True:
        try:
            async with aiohttp.ClientSession() as session:
                await session.get(url)
                print("‚úÖ –ü–∏–Ω–≥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω Render")
        except Exception as e:
            print("–û—à–∏–±–∫–∞ –ø–∏–Ω–≥–∞:", e)
        await asyncio.sleep(PING_INTERVAL)


@dp.message(Command("start"))
async def cmd_start(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /start ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ + –ø–æ–∫–∞–∑ —Ç–µ–∫—É—â–µ–≥–æ –∫—É—Ä—Å–∞"""
    buy, sell = await get_eur_rate()
    if buy and sell:
        text = (
            f"‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –∫—É—Ä—Å –µ–≤—Ä–æ –Ω–∞ —Å–∞–π—Ç–µ –ê–ª—å—Ñ–∞-–ë–∞–Ω–∫–∞.\n\n"
            f"üí∂ –¢–µ–∫—É—â–∏–π –∫—É—Ä—Å:\n"
            f"–ü–æ–∫—É–ø–∫–∞: {buy:.4f}\n–ü—Ä–æ–¥–∞–∂–∞: {sell:.4f}"
        )
    else:
        text = "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –µ–≤—Ä–æ, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ."

    await message.answer(text)
    asyncio.create_task(check_rate())


async def on_startup():
    """–ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á"""
    asyncio.create_task(ping_self())
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")


async def main():
    await on_startup()
    await dp.start_polling(bot)


# === HTTP-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render ===
# (Render —Ç—Ä–µ–±—É–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã–π –ø–æ—Ä—Ç, –∏–Ω–∞—á–µ –ø—Ä–æ—Ü–µ—Å—Å ‚Äú—É—Å–Ω—ë—Ç‚Äù)
async def handle(request):
    return web.Response(text="Bot is alive")

async def run_webserver():
    app = web.Application()
    app.add_routes([web.get("/", handle)])
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", int(os.getenv("PORT", 10000)))
    await site.start()
    print("üåê –í–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É", os.getenv("PORT", 10000))

if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    loop.create_task(run_webserver())
    loop.run_until_complete(main())

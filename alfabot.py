import os
import asyncio
import threading
import requests
from flask import Flask, request
from telegram import Update, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters

# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===
TOKEN = os.getenv("TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL", "https://alfabot-wt8z.onrender.com/webhook")
CHECK_INTERVAL = 300  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)

app = Flask(__name__)

# === –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ===
app_telegram = None
loop = None

# === –•—Ä–∞–Ω–∏–ª–∏—â–µ ===
subscribed_users = set()
last_rate = {"buy": None, "sell": None}

# === –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ –µ–≤—Ä–æ ===
def get_exchange_rate():
    try:
        url = "https://www.alfabank.by/api/v1/exchange-rates/rates/?currencyCode=978&rateType=cash"
        response = requests.get(url, timeout=10)
        response.raise_for_status()
        data = response.json()
        rate = data["rates"][0]
        buy = rate["buyRate"]
        sell = rate["sellRate"]
        return {"buy": buy, "sell": sell}
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞: {e}")
        return None

def format_rate_message(rate):
    return f"üí∂ –ö—É—Ä—Å –µ–≤—Ä–æ –≤ –ê–ª—å—Ñ–∞-–ë–∞–Ω–∫–µ (–Ω–∞–ª–∏—á–Ω—ã–π):\n–ü–æ–∫—É–ø–∫–∞: {rate['buy']} BYN\n–ü—Ä–æ–¥–∞–∂–∞: {rate['sell']} BYN"

# === –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π ===
async def check_rate_changes(context: ContextTypes.DEFAULT_TYPE):
    global last_rate
    
    current_rate = get_exchange_rate()
    if not current_rate:
        return
    
    # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫—É—Ä—Å –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ
    if last_rate["buy"] is None:
        last_rate = current_rate
        print(f"–ù–∞—á–∞–ª—å–Ω—ã–π –∫—É—Ä—Å: –ø–æ–∫—É–ø–∫–∞ {current_rate['buy']}, –ø—Ä–æ–¥–∞–∂–∞ {current_rate['sell']}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
        startup_message = "‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –Ω–∞—á–∞–ª –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞!\n\n"
        startup_message += format_rate_message(current_rate)
        
        for user_id in list(subscribed_users):
            try:
                await context.bot.send_message(chat_id=user_id, text=startup_message)
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ –∫—É—Ä—Å
    buy_changed = current_rate["buy"] != last_rate["buy"]
    sell_changed = current_rate["sell"] != last_rate["sell"]
    
    if buy_changed or sell_changed:
        print(f"–ö—É—Ä—Å –∏–∑–º–µ–Ω–∏–ª—Å—è! –°—Ç–∞—Ä—ã–π: {last_rate}, –ù–æ–≤—ã–π: {current_rate}")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏
        message = "üîî –ö—É—Ä—Å –µ–≤—Ä–æ –∏–∑–º–µ–Ω–∏–ª—Å—è!\n\n"
        message += format_rate_message(current_rate)
        message += "\n\nüìä –ò–∑–º–µ–Ω–µ–Ω–∏—è:\n"
        
        if buy_changed:
            diff = current_rate["buy"] - last_rate["buy"]
            emoji = "üìà" if diff > 0 else "üìâ"
            message += f"{emoji} –ü–æ–∫—É–ø–∫–∞: {diff:+.4f} BYN\n"
        
        if sell_changed:
            diff = current_rate["sell"] - last_rate["sell"]
            emoji = "üìà" if diff > 0 else "üìâ"
            message += f"{emoji} –ü—Ä–æ–¥–∞–∂–∞: {diff:+.4f} BYN"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
        for user_id in list(subscribed_users):
            try:
                await context.bot.send_message(chat_id=user_id, text=message)
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                if "blocked" in str(e).lower() or "bot was blocked" in str(e).lower():
                    subscribed_users.discard(user_id)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –∫—É—Ä—Å
        last_rate = current_rate

# === –•—ç–Ω–¥–ª–µ—Ä—ã –∫–æ–º–∞–Ω–¥ ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [KeyboardButton("–ö—É—Ä—Å –µ–≤—Ä–æ")],
        [KeyboardButton("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è"), KeyboardButton("–û—Ç–ø–∏—Å–∞—Ç—å—Å—è")],
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! üëã\n\n"
        "–Ø –æ—Ç—Å–ª–µ–∂–∏–≤–∞—é –∫—É—Ä—Å –µ–≤—Ä–æ –≤ –ê–ª—å—Ñ–∞-–ë–∞–Ω–∫–µ –∏ –ø—Ä–∏—Å—ã–ª–∞—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫—É—Ä—Å–∞.\n\n"
        "üìå –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ –ö—É—Ä—Å –µ–≤—Ä–æ - —É–∑–Ω–∞—Ç—å —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å\n"
        "‚Ä¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è - –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫—É—Ä—Å–∞\n"
        "‚Ä¢ –û—Ç–ø–∏—Å–∞—Ç—å—Å—è - –æ—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
        reply_markup=reply_markup,
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.lower()
    user_id = update.message.from_user.id
    
    if "–µ–≤—Ä–æ" in text:
        rate = get_exchange_rate()
        if rate:
            await update.message.reply_text(format_rate_message(rate))
        else:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å üòï")
    
    elif "–ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è" in text:
        subscribed_users.add(user_id)
        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–¥–ø–∏—Å–∞–ª—Å—è. –í—Å–µ–≥–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {len(subscribed_users)}")
        await update.message.reply_text(
            "‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!\n"
            "–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥—ã–π —Ä–∞–∑, –∫–æ–≥–¥–∞ –∫—É—Ä—Å –µ–≤—Ä–æ –∏–∑–º–µ–Ω–∏—Ç—Å—è."
        )
    
    elif "–æ—Ç–ø–∏—Å–∞—Ç—å—Å—è" in text:
        if user_id in subscribed_users:
            subscribed_users.remove(user_id)
            print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø–∏—Å–∞–ª—Å—è. –í—Å–µ–≥–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {len(subscribed_users)}")
            await update.message.reply_text("‚ùå –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
        else:
            await update.message.reply_text("–í—ã –∏ —Ç–∞–∫ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
    
    else:
        await update.message.reply_text(
            "–Ø –ø–æ–Ω–∏–º–∞—é –∫–æ–º–∞–Ω–¥—ã:\n"
            "‚Ä¢ –ö—É—Ä—Å –µ–≤—Ä–æ\n"
            "‚Ä¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è\n"
            "‚Ä¢ –û—Ç–ø–∏—Å–∞—Ç—å—Å—è"
        )

# === –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—É—Ä—Å–∞ ===
async def background_rate_checker(app_telegram):
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—É—Ä—Å–∞"""
    await asyncio.sleep(10)  # –ñ–¥–µ–º 10 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–µ—Ä–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
    
    while True:
        try:
            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
            context = ContextTypes.DEFAULT_TYPE(application=app_telegram)
            await check_rate_changes(context)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ: {e}")
        
        await asyncio.sleep(CHECK_INTERVAL)

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ===
async def setup_bot():
    app_telegram = Application.builder().token(TOKEN).build()
    
    app_telegram.add_handler(CommandHandler("start", start))
    app_telegram.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    await app_telegram.bot.set_webhook(WEBHOOK_URL)
    print(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")
    print(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—É—Ä—Å–∞ –∫–∞–∂–¥—ã–µ {CHECK_INTERVAL} —Å–µ–∫—É–Ω–¥")
    
    return app_telegram

# === Flask-–º–∞—Ä—à—Ä—É—Ç—ã ===
@app.route("/")
def index():
    return f"‚úÖ Telegram bot is running<br>Subscribers: {len(subscribed_users)}<br>Last rate: Buy {last_rate['buy']}, Sell {last_rate['sell']}"

@app.route("/webhook", methods=["POST"])
def webhook():
    update = Update.de_json(request.get_json(force=True), app_telegram.bot)
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ event loop
    asyncio.run_coroutine_threadsafe(
        app_telegram.process_update(update),
        loop
    )
    return "OK", 200

# === –ó–∞–ø—É—Å–∫ ===
if __name__ == "__main__":
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    
    app_telegram = loop.run_until_complete(setup_bot())
    
    # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—É—Ä—Å–∞
    asyncio.ensure_future(background_rate_checker(app_telegram), loop=loop)
    
    # –ó–∞–ø—É—Å–∫ Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    def run_flask():
        app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 10000)))
    
    flask_thread = threading.Thread(target=run_flask, daemon=True)
    flask_thread.start()
    
    # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
    try:
        loop.run_forever()
    except KeyboardInterrupt:
        print("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
